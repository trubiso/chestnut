/*class Tuple<A, B> {}
class GridPiece {}
class Array<T> {}

void print_position(Tuple<i32[]&, i32?>[3]?& position) pure {}

void print_grid(GridPiece&[3][4]?[] pieces) {}

void print(string arg) {

}

void silly() {

}

void set_error_callback() {

}

export void set_element() mut {

}

class Node<T> {
	Node<T>& next;
	public T value;

	public void traverse() {
		let x = 9;
	}

	public void set() mut {

	}
}

T add<T>(T a, T b) pure => a + b;

i32 do_thing(i32 only_arg) {
	let a = only_arg;
	let b = 10;
	let c = a + b;
	let d = a * c;
	let e = a + b + c + d;
	return e;
}*/

void main() {
	// print_position(3);
	// let ~ = do_thing();
	mut i32 t;
	unsafe {
		t = 10;
	}
	t = t;
	mut i32 d;
	// d.value;
	i32 x = 2 + (3 - 4);
	mut a = 3 + 5 + (2 - 3) * -9 + 4/2;
	a += 10;
	a *= 9 + 10;
	// print("Hello World!", 9+3-4);
	4+2+4;
	// .3u + (0xDead_Beefu - 2iz) - 7u32 * 0b1010_1001i128 / 0o7f;

	mut r = 10;



	let aa = 'a';
	// 3 + a(); -> error

	void goofy_void() {

	}

	let b = 'b';
	let cc = 'c';

	// a + b(); -> error

	// (string err) => print(err);
}

// i32 divided_by_two(i32 x) => x / 2;