class Tuple<A, B> {}
class GridPiece {}
class Array<T> {}

void print_position(Tuple<i32[]&, i32?>[3]?& position) pure {}

void print_grid(GridPiece&[3][4]?[] pieces) {}

export bool do_thing(Array<~> arr) {
	
}

void print() {

}

void silly() {

}

void set_error_callback() {
	
}

export void set_element() mut {
	
}

class Node<T> {
	Node<T>& next;
	public T value;

	public Node traverse() {
		let x = 9;
	}

	public T mut& set() mut {

	}
}

T add<T>(T a, T b) pure {
	return a + b;
}

void do_thing(i32 only_arg) {}

i32 main(string[4+4] args, i32[34] arg) {
	// print_position(3);
	// let ~ = do_thing();
	i32 x = 2 + (3 - 4);
	let a = 3 + 5 + (2 - 3) * -9 + 4/2;
	a += 10;
	a *= 9 + 10;
	// print("Hello World!", 9+3-4);
	4+2+4;
	// .3u + (0xDead_Beefu - 2iz) - 7u32 * 0b1010_1001i128 / 0o7f;

	~mut r = 10;

	do_thing();
	do_thing(3);
	do_thing("hi");
	do_thing(2, 4);

	/***/

	let a = 'a';
	3 + a();

	/* void goofy_void() {
		print("hello from the goofy void");
	}

	let b = 'b';
	let c = 'c';

	silly(9)(a(3), b(5), c(8));

	a + b();

	set_error_callback((err) => print(err));

	return -a + 3; */
}

i32 divided_by_two(i32 x) => x / 2;
